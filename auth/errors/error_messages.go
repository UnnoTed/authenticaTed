// generated by authenticaTed v1.0.0 at 2016-12-27 20:21:22.117658972 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:21:13.312569371 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:38.580844614 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:25.431652859 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:19.723658711 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:14.453679536 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:13.088382401 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:04.755468607 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:19:04.441122365 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:18:58.887731611 -0300 BRT

package errors

import "log"

type ErrorCode int

// ONLY INSERT NEW ERRORS AT THE END
const (
	ErrorUnknown ErrorCode = iota
	ErrorUserExists
	ErrorUsernameExists
	ErrorEmailExists
	ErrorUserDoesntExists
	ErrorUserInvalidPassword
	ErrorUserInvalidUsername
	ErrorUserInvalidEmail
	ErrorUserInvalid
	ErrorNotEnoughInfo
	ErrorNoPasswordToCompare
	ErrorMissingParam
	ErrorUnauthorized

	// this is used to check for missing error messages
	TotalErrorMessages
)

// ErrorMessages holds all error messages with support for different languages
var ErrorMessages = map[string]map[ErrorCode]string{
	"en": {
		ErrorUserExists:          "The User already exists.",
		ErrorUsernameExists:      "This username is already registered.",
		ErrorEmailExists:         "This email is already registered.",
		ErrorUserDoesntExists:    "This user doesn't exists.",
		ErrorUserInvalidPassword: "The user and/or password didn't match.", // shouldn't give a clue about what is wrong
		ErrorUserInvalidUsername: "This username is invalid.",
		ErrorUserInvalidEmail:    "This email is invalid.",
		ErrorUserInvalid:         "This user is invalid.",
		ErrorNotEnoughInfo:       "There is not enough information to find a user.",
		ErrorNoPasswordToCompare: "There is no password to compare to.",
		ErrorMissingParam:        "A URL Param is required.",
		ErrorUnauthorized:        "You're not authorized to access this page.",
	},
	"pt-br": {
		ErrorUserExists:          "O Usuario ja existe.",
		ErrorUsernameExists:      "Esse usuario ja existe.",
		ErrorEmailExists:         "Esse email ja existe.",
		ErrorUserDoesntExists:    "Esse usuario não existe.",
		ErrorUserInvalidPassword: "O usuario e/ou senha não conferem.", // não deve dar pistas sobre o que está errado
		ErrorUserInvalidUsername: "Esse nome de usuario não é valido.",
		ErrorUserInvalidEmail:    "Esse email não é valido.",
		ErrorUserInvalid:         "Usuario invalido.",
		ErrorNotEnoughInfo:       "Não tenho informação suficiente para encontrar um usuario.",
		ErrorNoPasswordToCompare: "Não tenho uma senha para compara-la.",
		ErrorMissingParam:        "Um parametro de url é obrigatorio.",
		ErrorUnauthorized:        "Você não está autorizado a acessar essa página.",
	},
}

func init() {
	// this code checks for missing error messages
	// less 1 to exclude "TotalErrorMessages"
	t := int(TotalErrorMessages) - 1

	for lang := range ErrorMessages {
		messages := len(ErrorMessages[lang])

		// check if there are less messages than errors
		if messages < t {
			log.Fatalf("Error: there aren't enough error messages, you have [%d] error codes and [%d] error messages in the [%s] language.",
				t, messages, lang)
		}
	}
}
