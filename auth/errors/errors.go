// generated by authenticaTed v1.0.0 at 2016-12-27 20:21:22.118266891 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:21:13.313166814 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:38.581470118 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:25.432237726 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:19.724240095 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:14.454270374 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:13.089127723 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:04.756055201 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:19:04.441716197 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:18:58.888333437 -0300 BRT

package errors

var DefaultLanguage = "en"

type Error struct {
	Err      error
	Language string
	Message  string
	Code     ErrorCode
}

// New returns a error compactible with the default Go "error"
func New(msg string) *Error {
	e := &Error{
		Language: DefaultLanguage,
		Message:  msg,
	}

	return e
}

func Mask(err error, code ErrorCode) *Error {
	e := &Error{
		Err:     err,
		Message: ErrorMessages[DefaultLanguage][code],
	}

	return e
}

// Error gives support to native golang error
// it's used for testing
func (e *Error) Error() string {
	if e.Message == "" && e.Err != nil {
		return e.Err.Error()
	}

	return e.Message
}

// String returns the error message
func (e *Error) String() string {
	if e.Message == "" && e.Err != nil {
		return e.Err.Error()
	}

	return e.Message
}

// JSON converts the error to json
// it can used on REST APIs like `echo` and `gin`
func (e *Error) JSON() map[string]interface{} {
	i := map[string]interface{}{
		"success": false,
		"error": map[string]interface{}{
			"code":     e.Code,
			"message":  e.Message,
			"language": e.Language,
		},
	}

	return i
}

// FromCode creates a new Error using a ID that should
// lead to a pre-defined error
func FromCode(code ErrorCode) *Error {
	e := &Error{
		Code:    code,
		Message: ErrorMessages[DefaultLanguage][code],
	}

	return e
}

// FromCodeTranslate creates a new Error using a ID that should
// lead to a pre-defined error
func FromCodeLang(code ErrorCode, lang string) *Error {
	if lang == "" {
		lang = DefaultLanguage
	}

	e := &Error{
		Code:     code,
		Language: lang,
		Message:  ErrorMessages[lang][code],
	}

	return e
}

func FromErr(err error) *Error {
	if err == nil {
		return nil
	}

	e := &Error{
		Language: "en",
		Message:  err.Error(),
	}

	return e
}
