// generated by authenticaTed v1.0.0 at 2016-12-27 20:21:22.128312625 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:21:13.321712735 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:38.590024913 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:25.440481996 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:19.732378951 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:14.462460044 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:13.097195551 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:04.764245942 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:19:04.450080059 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:18:58.902100231 -0300 BRT

package util

import (
	"crypto/aes"
	"crypto/cipher"
	"encoding/hex"
	"math/rand"
	"time"

	"github.com/UnnoTed/authenticaTed/errors"
)

// -- IMPORTANT --
// FOR THE LOVE OF GOD DON'T USE THIS TO ENCRYPT PASSWORDS
// or maybe do it, i don't give a damn

// KeySize ya
const KeySize = 16

func init() {
	rand.Seed(time.Now().UnixNano())
}

// RandomCIV generates a random common iv
func RandomCIV() ([]byte, *errors.Error) {
	civ := make([]byte, KeySize)
	_, err := rand.Read(civ)
	return civ, errors.FromErr(err)
}

// Encrypt .
func Encrypt(text, key string) (string, *errors.Error) {
	text = hex.EncodeToString([]byte(text))
	c, err := aes.NewCipher([]byte(key))
	if err != nil {
		return "", errors.FromErr(err)
	}

	civ, cErr := RandomCIV()
	if err != nil {
		return "", cErr
	}

	e := cipher.NewCFBEncrypter(c, civ)
	enc := make([]byte, len(text))
	e.XORKeyStream(enc, []byte(text))

	text = hex.EncodeToString(append(civ, enc...))
	return text, nil
}

// Decrypt .
func Decrypt(text, key string) (string, *errors.Error) {
	c, err := aes.NewCipher([]byte(key))
	if err != nil {
		return "", errors.FromErr(err)
	}

	block := c.BlockSize() * 2

	civ, err := hex.DecodeString(text[:block])
	if err != nil {
		return "", errors.FromErr(err)
	}

	t, err := hex.DecodeString(text[block:])
	if err != nil {
		return "", errors.FromErr(err)
	}
	text = string(t)

	d := cipher.NewCFBDecrypter(c, []byte(civ))
	dec := make([]byte, len(text))
	d.XORKeyStream(dec, []byte(text))

	t, err = hex.DecodeString(string(dec))
	if err != nil {
		return "", errors.FromErr(err)
	}

	return string(t), nil
}
