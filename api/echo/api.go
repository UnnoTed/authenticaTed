// generated by authenticaTed v1.0.0 at 2016-12-27 20:21:22.131719865 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:21:13.324975011 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:38.592965138 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:25.44366996 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:19.734917395 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:14.464972088 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:13.099797081 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:04.766738693 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:19:04.45258222 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:18:58.906533559 -0300 BRT

package echo

import (
	"net/http"

	"github.com/labstack/echo"

	auth "github.com/UnnoTed/authenticaTed"
	"github.com/UnnoTed/authenticaTed/errors"
	. "github.com/UnnoTed/authenticaTed/logger"
)

// API holds all api handlers
type API struct{}

// Get handles get requests to respond with a list of users
// the user making the request must have power UserPowerAdmin or greater
func (api *API) Get(c echo.Context) error {
	// gets the limit query param
	Logger.Debug("[API.Get]: Getting limit query...")
	limit, err := GetIntQueryParam(c, "limit")
	if err != nil {
		return Error(c, err)
	}

	// gets the offset query param
	Logger.Debug("[API.Get]: Getting offset query...")
	offset, err := GetIntQueryParam(c, "offset")
	if err != nil {
		return Error(c, err)
	}

	// get the result with limit and offset and count
	Logger.Debug("[API.Get]: Finding users...")
	res := auth.FindExpressive().Offset(offset)

	// insert limit when greater than 0
	if limit > 0 {
		res = res.Limit(limit)
	}

	// count users found
	count, err := res.Count()
	if err != nil {
		return Error(c, err)
	}

	var list []auth.User
	if count > 0 {
		Logger.Debug("[API.Get]: Users found, copying...")

		// copy everything found when found something
		err = res.All(&list)
		if err != nil {
			return Error(c, err)
		}

	} else {
		Logger.Debug("[API.Get]: No users were found, returning error")

		// returns error that nothing was found
		return ErrorWithStatus(c, http.StatusNoContent, errors.New("Nothing found"))
	}

	Logger.Debug("[API.Get]: Users list sent.")

	// returns the user list
	return Success(c, map[string]interface{}{
		"users": list,
	})
}

// Post handles post requests to create a new user
// the required fields are: [username, email and password]
func (api *API) Post(c echo.Context) error {
	u := auth.NewUser()

	// tries to insert the body data
	// into the user variable
	if err := c.Bind(u); err != nil {
		return Error(c, err)
	}

	Logger.WithField("user", u).Debug("USER")

	// tries to create the user
	// it does all the work of validation
	// and checking for existing username and email...
	_, err := u.Create()
	if err != nil {
		return Error(c, err)
	}

	// returns the id with status created
	return SuccessWithStatus(c, http.StatusCreated, map[string]interface{}{
		"user": u,
	})
}

// PostAuth handles post requests to authenticate a user
// the required fields are: [username || email, password]
func (api *API) PostAuth(c echo.Context) error {
	u := auth.NewUser()

	// tries to insert the body data
	// into the user variable
	if err := c.Bind(u); err != nil {
		return Error(c, err)
	}

	// tries to authenticate the user
	// it does all the work of validation
	// and checking for invalid info...
	token, err := u.Auth(u.Password)
	if err != nil {
		return Error(c, err)
	}

	// returns OK with the jwt token and user's data
	return SuccessWithStatus(c, http.StatusOK, map[string]interface{}{
		"user":  u,
		"token": token,
	})
}

// GetID handles get requests with a id in it
// to return the user of the given id
func (api *API) GetID(c echo.Context) error {
	id := c.Param("id")
	if id == "" {
		return Error(c, errors.FromCode(errors.ErrorMissingParam))
	}

	// inserts the id into the user
	u := auth.NewUser()
	err := u.SetIDFromString(id)
	if err != nil {
		return Error(c, err)
	}

	// tries to find the user by the ID
	found, err := u.Find()
	if err != nil {
		return Error(c, err)
	}

	// return error when not found
	if !found {
		return Error(c, err)
	}

	// responds OK with the user data
	return Success(c, map[string]interface{}{
		"user": u,
	})
}

// PutID handles put requests with a id in it
// to update the user of the given id
func (api *API) PutID(c echo.Context) error {
	id := c.Param("id")
	Logger.WithField("ID", id).Debug("[API.PutID]")

	if id == "" {
		Logger.Error("[API.PutID]: no id")
		return Error(c, errors.FromCode(errors.ErrorNotEnoughInfo))
	}

	// tries to insert the body data
	// into the user variable
	u := auth.NewUser()
	if err := c.Bind(u); err != nil {
		Logger.WithError(err).Error("[API.PutID]: error while binding to user")
		return Error(c, err)
	}

	// insert the id from the url into the user variable
	err := u.SetIDFromString(id)
	if err != nil {
		Logger.WithError(err).Error("[API.PutID]: error while setting id")
		return Error(c, err)
	}

	// save the changes
	err = u.Save()
	if err != nil {
		Logger.WithError(err).Error("[API.PutID]: error while saving")
		return Error(c, err)
	}

	Logger.WithField("user", u).Debug("OK")
	// responds OK with the updaTed user data
	return Success(c, map[string]interface{}{
		"user": u,
	})
}

// DeleteID handles delete requests with a id in it
// to soft delete the user of the given id
func (api *API) DeleteID(c echo.Context) error {
	id := c.Param("id")
	Logger.WithField("ID", id).Debug("[API.PutID]")

	// check for missing id
	if id == "" {
		Logger.Error("[API.PutID]: no id")
		return Error(c, errors.FromCode(errors.ErrorNotEnoughInfo))
	}

	u := auth.NewUser()
	// insert the id from the url into the user variable
	if err := u.SetIDFromString(id); err != nil {
		Logger.WithError(err).Error("[API.PutID]: error while setting user id")
		return Error(c, err)
	}

	// apply deleted state to the user
	if err := u.SoftDelete(); err != nil {
		Logger.WithError(err).Error("[API.PutID]: error while deleting user")
		return Error(c, err)
	}

	// responds OK
	return Success(c, nil)
}

// Middleware is a function that returns a function that returns a function that runs the function given in the first given function so the next function runs at the end of the last function
func (api *API) Middleware(power auth.UserPower) func(echo.HandlerFunc) echo.HandlerFunc {
	return func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			// get user's power from the jwt token
			up, err := auth.GetPower(c)
			if err != nil {
				c.Error(err)
			}

			// checks if the current user's power is lower than the required
			if up < power {
				c.Error(errors.FromCode(errors.ErrorUnauthorized))

				// continue when power is equal or greater
			} else if up >= power {
				if err := next(c); err != nil {
					c.Error(err)
				}
			}

			return nil
		}
	}
}
