// generated by authenticaTed v1.0.0 at 2016-12-27 20:21:22.134207147 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:21:13.328777392 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:38.595421767 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:25.447978959 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:19.74036397 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:14.467892247 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:13.10275526 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:20:04.769765649 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:19:04.459108295 -0300 BRT

// generated by authenticaTed v1.0.0 at 2016-12-27 20:18:58.910687165 -0300 BRT

package echo

import (
	"net/http"
	"strconv"

	"github.com/UnnoTed/authenticaTed/auth/errors"
	"github.com/labstack/echo"
)

// GetIntQueryParam returns a query param as a int
func GetIntQueryParam(c echo.Context, param string) (int, error) {
	p := c.QueryParam(param)

	// set to 0 so it won't return a
	// error when there is no param
	if p == "" {
		p = "0"
	}

	return strconv.Atoi(p)
}

// Success returns a json with the OK status
func Success(c echo.Context, data map[string]interface{}) error {
	return SuccessWithStatus(c, http.StatusOK, data)
}

// SuccessWithStatus returns a json with the given status
func SuccessWithStatus(c echo.Context, status int, data map[string]interface{}) error {
	data["success"] = true
	return c.JSON(status, data)
}

// Error returns a json error with the Internal Server Error status
func Error(c echo.Context, err interface{}) error {
	return ErrorWithStatus(c, http.StatusInternalServerError, err)
}

// ErrorWithStatus returns a json error with the given status
func ErrorWithStatus(c echo.Context, status int, err interface{}) error {
	switch err.(type) {
	case error:
		err = errors.FromErr(err.(error))
	}

	e := map[string]interface{}{
		"error":   err.(*errors.Error).JSON(),
		"success": false,
	}

	return c.JSON(status, e)
}
